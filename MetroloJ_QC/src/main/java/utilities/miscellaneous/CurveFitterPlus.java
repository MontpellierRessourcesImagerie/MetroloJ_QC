package utilities.miscellaneous;

import ij.IJ;
import ij.Prefs;
import ij.gui.Plot;
import ij.measure.CurveFitter;
import java.awt.Color;

/**The CurveFitterPlus class provides functionalities for fitting curves to 
*intensity profiles obtained along a line of interest in an image. 
*It extends the capabilities of ImageJ's CurveFitter by allowing fitting in 
*multiple dimensions (X, Y, or Z) and providing enhanced plotting features.
*/
public class CurveFitterPlus {
//a string to store the parameters of the fit.
public String paramString="";   

//an array that stores the found fit parameters as given by CurveFitter getParams() function
public double[] params=new double [4];

// stores the R2 fit parameter, as given by CurveFitter's function getFitGoodness();
public Double R2=Double.NaN;

// stores the intensity profiles used for plots. profiles [0] are the calibrated coordinates along the line of interest, 
// profiles[1] are the corresponding, measured intensities and profiles[2] are the fitted values (as given by CurveFitter.f() function).
public double [][] profiles;

// fit formula, as used in CurveFitter plugin
public String formula;

// the pixel size (ie. width, height or depth) within the line (if a X, Y or Z profile)
public double linePixelSize= 1.0D;

// the unit of the linePixelSize value
public String unit="";

// fit formula value, as used in CurveFitter function fit
// Straight Line STRAIGHT_LINE = 0 ,2nd Degree Polynomial POLY2 = 1, 3rd Degree Polynomial POLY3 = 2
// 4th Degree Polynomial POLY4 = 3, Exponential EXPONENTIAL = 4, Power POWER = 5, Log LOG = 6
// Rodbard RODBARD = 7, Gamma Variate GAMMA_VARIATE = 8, y = a+b*ln(x-c) LOG2 = 9, Rodbard (NIH Image)RODBARD2 = 10
// Exponential with Offset EXP_WITH_OFFSET = 11, Gaussian GAUSSIAN = 12,  Exponential Recovery EXP_RECOVERY = 13
// Inverse Rodbard INV_RODBARD = 14, Exponential (linear regression) EXP_REGRESSION = 15,  Power (linear regression)POWER_REGRESSION = 16
// 5th Degree Polynomial POLY5 = 17, 6th Degree Polynomial POLY6 = 18, 7th Degree Polynomial POLY7 = 19, 8th Degree Polynomial POLY8 = 20,
// Gaussian (no offset) GAUSSIAN_NOOFFSET = 21,  Exponential Recovery (no offset) EXP_RECOVERY_NOOFFSET = 22,
// Chapman-Richards CHAPMAN = 23,  Error Function ERF = 24;
public int fitFormula;

// stores the plot generated by getPlot() function
public Plot plot=null;

double max=0.0D;

// a boolean used for the purpose of debugginh
boolean debugMode=Prefs.get("MetroloJDialog_debugMode.Boolean", false);

/**
 * Constructs an instance of CurveFitterPlus
 */
public CurveFitterPlus() {
    
}
/**
 * Constructs a CurveFitterPlus instance with the provided line scan data, unit, and line pixel size.
 *
 * @param lineScan The line scan intensity data as an array of doubles.
 * @param unit The unit of measurement for the line scan data.
 * @param linePixelSize The size of a pixel in the line scan data.
 */
public CurveFitterPlus(double [] lineScan, String unit, double linePixelSize){
    unit=this.unit;
    this.linePixelSize=linePixelSize;
    profiles=new double [3][lineScan.length];
    profiles[1]=lineScan;
    double[] temp=new double [lineScan.length];
    for (int k=0; k<lineScan.length; k++) temp[k] = k * linePixelSize;
    profiles[0]=temp;
}
/**
 * Fits a profile using the specified fit formula and dimension.
 *
 * @param fitFormula The fit formula to use.
 * @param dimension The dimension for fitting (0 for X, 1 for Y, 2 for Z).
 */
 public void fitProfile(int fitFormula, int dimension) {
    max = profiles[1][0];
    params[0] = max;
    params[1] = max;
    params[2] = 0.0D;
    params[3] = 2.0D * linePixelSize;
    
    for (int k = 0; k < profiles[1].length; k++) {
      double currVal = profiles[1][k];
      params[0] = Math.min(params[0], currVal);
      if (currVal > max) {
        params[1] = currVal;
        params[2] = profiles[0][k];
        max = currVal;
      } 
    } 
    CurveFitter cv = new CurveFitter(profiles[0], profiles[1]);
    cv.setInitialParameters(params);
    cv.doFit(fitFormula);
    params= cv.getParams();
    if (fitFormula==12){
        switch (dimension) {
            case 0: paramString="Fitted on I(x) = a + (b-a)*exp(-(x-c)^2/(2*d^2))";
            break;
            case 1: paramString="Fitted on I(y) = a + (b-a)*exp(-(y-c)^2/(2*d^2))";
            break;
            case 2: paramString="Fitted on I(z) = a + (b-a)*exp(-(z-c)^2/(2*d^2))";
            break;
        }
    }
    if (fitFormula==1){
        switch (dimension) {
            case 0: paramString="Fitted on I(x) = a+bx+cx^2)";
            break;
            case 1: paramString="Fitted on I(y) = a+by+cy^2)";
            break;
            case 2: paramString="Fitted on I(z) = a+bz+cz^2)";
            break;
        }
    }
    String tempString = cv.getResultString();
    tempString = tempString.substring(tempString.lastIndexOf("ms") + 2);
    paramString+=tempString;
    R2=cv.getFitGoodness();
    double [] fittedProfiles=new double[profiles[0].length];
    for (int j = 0; j < profiles[0].length; j++) {
      fittedProfiles[j] = CurveFitter.f(fitFormula, params, profiles[0][j]);
    } 
    profiles[2]=fittedProfiles;
}
 /**
  * draws a plot across the line of interest, with measured values (dotted) and fit values (continuous line)
  * @param dimension is used for the purpose of the plot name.
  */
 public void getPlot(int dimension, boolean showLabels) {
    String dim="";
    switch (dimension) {
      case 0:
        dim = "x";
        break;
      case 1:
        dim = "y";
        break;
      case 2:
        dim = "Z";
        break;
    }
    
    if (showLabels) plot = new Plot("Profile plot along the "+dim+" axis", ""+dim+" (" + unit + ")", "Intensity ", profiles[0], profiles[2]);
    else plot=new Plot("", "", "", profiles[0], profiles[2]);
    plot.setSize(300, 200);

    
    if (showLabels) {
        plot.setColor(Color.red);
        plot.addPoints(profiles[0], profiles[1], 0);
        plot.setColor(Color.black);
        plot.addLabel(0.6D, 0.13D, "Dots: measured\nLine: fitted");
    }
    else {
        plot.setAxes(false, false, false, false, false, false, 1, 1);
        int  plotHeight=(int) Math.floor(profiles[0].length*0.66);
        plot.setLimits(0, profiles[0].length, 0, max*1.1);
        plot.setFrameSize(profiles[0].length, (int) Math.floor(profiles[0].length*0.66));
        plot.setLineWidth(plotHeight/100);
        plot.setColor(Color.red);
        plot.addPoints(profiles[0], profiles[1], plot.LINE);
        plot.setColor(Color.black);
        if (debugMode) {
            IJ.log("(in CurveFitterPlus>getPlot) plot width & height "+plot.getSize().width+", "+plot.getSize().height+
                    "\n frame width & height: "+profiles[0].length+", "+plotHeight);
        }  
    }
  }    
}
